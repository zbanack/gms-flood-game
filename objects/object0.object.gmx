<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///README

/*
    Flood It Game in GameMaker: Studio
    
    Zack Banack
        http://zackbanack.com/
        @zackbanack
    
    May 30, 2017
        v1.0
    
    Associated Tutorials/Walkthroughs
        http://zackbanack.com/blog/floodgame
        http://zackbanack.com/blog/floodfill
        
    End User License Agreement (EULA)
        http://zackbanack.com/EULA
        
    Notes
        - This asset was created for GameMaker: Studio, so non-documented adjustments may be required to get it working with GameMaker: Studio 2.
        - Because this is a free asset, support will be limited.
*/

random_set_seed(randomize()); // randomness

arr = ds_grid_create(16, 16); // init 16x16 grid
cell_width = 20; // width of each grid cell
cell_height = 20; // height of each grid cell
xpos = 32; // x-coordinate of the top-left cell in the room
ypos = 32; // y-coordinate of the top-left cell in the room

// init the colors used in the game
red = c_red;
yellow = c_yellow;
green = c_lime;
blue = c_blue;

flood_color = red; // color to flood the grid (from top-left cell)

turns = 0; // how many color swaps it takes to flood the grid

// cycle through all the cells in the grid and make them any of the four colors
for (var i = 0; i &lt; ds_grid_width(arr); i++) {
    for (var j = 0; j &lt; ds_grid_height(arr); j++) {
        ds_grid_set(arr, i, j, choose(red, yellow, green, blue));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var pressed = false; // no key has been pressed

// determine which key was pressed
switch (keyboard_key) {
    case (ord("R")): // if R, set the flood color to red
        flood_color = red;
        pressed = true; // indicate that a key has been pressed
        break;
    case (ord("Y")): // if Y, set the flood color to yellow
        flood_color = yellow;
        pressed = true;
        break;
    case (ord("G")): // if G, set the flood color to green
        flood_color = green;
        pressed = true;
        break;
    case (ord("B")): // if B, set the flood color to blue
        flood_color = blue;
        pressed = true;
        break;
}

// if a key has been pressed
if (pressed) {
    if (ds_grid_get(arr, 0, 0) != flood_color) { // ensure the color of the top-left cell is not already the flood color
        turns+=1; // increment turn counter
        floodfill(0, 0, flood_color, ds_grid_get(arr, 0, 0)); // call the algorithm, starting in the top-left (0, 0) grid cell
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var success = true; // whether the grid is one solid color, default to true*

// cycle through all the cells in the grid
for (var i = 0; i &lt; ds_grid_width(arr); i++) {
    for (var j = 0; j &lt; ds_grid_height(arr); j++) {
        // temp variables for top-left and bottom-right coordinates of each cell
        var x1, y1, x2, y2;
        x1 = xpos + (i * cell_width);
        y1 = ypos + (j * cell_height);
        x2 = x1 + cell_width;
        y2 = y1 + cell_height;

        var col = ds_grid_get(arr, i, j); // get the color of the cell

        // *multiple cell colors in the grid, we cannot win this turn
        if (col != flood_color) {
            success = false;
        }

        // draw rectangle at the given coordinates based on the color of the cell
        draw_set_color(col);
        draw_rectangle(x1, y1, x2, y2, false);
    }
}

// if all grid cells are the same color, print the number of turns and restart the game
if (success) {
    show_debug_message(turns);
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
